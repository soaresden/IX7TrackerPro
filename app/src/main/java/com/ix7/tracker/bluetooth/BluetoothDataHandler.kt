package com.ix7.tracker.bluetooth

import android.util.Log
import com.ix7.tracker.core.ScooterData
import java.util.*

class BluetoothDataHandler(
    private val onDataUpdate: (ScooterData) -> Unit,
    private val sendCommand: (ByteArray) -> Unit  // Callback pour envoyer des commandes
) {
    companion object {
        private const val TAG = "BluetoothDataHandler"

        // Commandes sp√©cifiques M0Robot
        private val CMD_GET_INFO = byteArrayOf(0x55.toByte(), 0xAA.toByte(), 0x03, 0x22, 0x01, 0x01, 0x27) // Demande infos g√©n√©rales
        private val CMD_GET_BATTERY = byteArrayOf(0x55.toByte(), 0xAA.toByte(), 0x03, 0x22, 0x01, 0x31, 0x57.toByte()) // Demande batterie
        private val CMD_GET_ODOMETER = byteArrayOf(0x55.toByte(), 0xAA.toByte(), 0x03, 0x22, 0x01, 0x29, 0x4F) // Demande odom√©trie
        private val CMD_GET_REALTIME = byteArrayOf(0x55.toByte(), 0xAA.toByte(), 0x03, 0x22, 0x01, 0x20, 0x46) // Demande donn√©es temps r√©el
        private val CMD_GET_TEMPERATURE = byteArrayOf(0x55.toByte(), 0xAA.toByte(), 0x03, 0x22, 0x01, 0x1A, 0x40) // Demande temp√©rature

        // Types de frames reconnus
        private const val FRAME_TYPE_KEEP_ALIVE = "KEEP_ALIVE"
        private const val FRAME_TYPE_M0ROBOT_MAIN_8BYTE = "M0ROBOT_MAIN_8BYTE"
        private const val FRAME_TYPE_M0ROBOT_EXTENDED_16BYTE = "M0ROBOT_EXTENDED_16BYTE"
        private const val FRAME_TYPE_DIAGNOSTIC = "DIAGNOSTIC"
        private const val FRAME_TYPE_EMPTY = "EMPTY"
        private const val FRAME_TYPE_RESPONSE = "RESPONSE" // Nouvelles r√©ponses aux commandes
        private const val FRAME_TYPE_UNKNOWN = "UNKNOWN"
    }

    private var currentData = ScooterData()
    private val bluetoothDiag = BluetoothDiag
    private var frameCount = 0
    private var validFrameCount = 0
    private var isInitialized = false
    private var commandSequenceStep = 0

    // Statistiques pour le rapport
    private val frameTypeStats = mutableMapOf<String, Int>()
    private val rawDataBuffer = mutableMapOf<String, ByteArray>()

    fun handleData(data: ByteArray) {
        frameCount++

        try {
            Log.d(TAG, "[BLE] RX: [] ${data.size} bytes: ${bytesToHex(data)}")

            // Analyser avec BluetoothDiag
            val diagnosticResult = bluetoothDiag.analyzeFrame(data)

            val frameType = identifyFrameType(data)
            updateFrameStats(frameType)

            Log.d(TAG, "Type de frame d√©tect√©: $frameType")

            // Si pas encore initialis√©, commencer la s√©quence d'init
            if (!isInitialized && frameType == FRAME_TYPE_KEEP_ALIVE) {
                startInitializationSequence()
                return
            }

            // Parser selon le type de frame
            when (frameType) {
                FRAME_TYPE_KEEP_ALIVE -> {
                    Log.d(TAG, "Keep-alive re√ßu")
                    if (isInitialized) {
                        continueCommandSequence()
                    }
                    generateDiagnosticReport()
                    return
                }

                FRAME_TYPE_RESPONSE -> {
                    validFrameCount++
                    parseCommandResponse(data)
                    return
                }

                FRAME_TYPE_M0ROBOT_MAIN_8BYTE -> {
                    validFrameCount++
                    val parsedData = parseM0RobotMainFrame(data)
                    updateCurrentData(parsedData)
                }

                FRAME_TYPE_M0ROBOT_EXTENDED_16BYTE -> {
                    validFrameCount++
                    val parsedData = parseM0RobotExtendedFrame(data)
                    updateCurrentData(parsedData)
                }

                FRAME_TYPE_DIAGNOSTIC -> {
                    Log.d(TAG, "Frame de diagnostic re√ßue: ${bytesToHex(data)}")
                    return
                }

                FRAME_TYPE_EMPTY -> {
                    Log.d(TAG, "Frame vide ignor√©e")
                    return
                }

                else -> {
                    Log.w(TAG, "Type de frame non reconnu: ${bytesToHex(data)}")
                    // Essayer de parser comme r√©ponse de commande
                    parseCommandResponse(data)
                }
            }

        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors du traitement des donn√©es", e)
        }
    }

    private fun startInitializationSequence() {
        Log.i(TAG, "üöÄ D√âMARRAGE S√âQUENCE D'INITIALISATION M0ROBOT")
        isInitialized = true
        commandSequenceStep = 0
        continueCommandSequence()
    }

    private fun continueCommandSequence() {
        when (commandSequenceStep) {
            0 -> {
                Log.d(TAG, "üì° Envoi commande: Demande infos g√©n√©rales")
                sendCommand(CMD_GET_INFO)
            }
            1 -> {
                Log.d(TAG, "üì° Envoi commande: Demande batterie")
                sendCommand(CMD_GET_BATTERY)
            }
            2 -> {
                Log.d(TAG, "üì° Envoi commande: Demande odom√©trie")
                sendCommand(CMD_GET_ODOMETER)
            }
            3 -> {
                Log.d(TAG, "üì° Envoi commande: Demande donn√©es temps r√©el")
                sendCommand(CMD_GET_REALTIME)
            }
            4 -> {
                Log.d(TAG, "üì° Envoi commande: Demande temp√©rature")
                sendCommand(CMD_GET_TEMPERATURE)
            }
            else -> {
                // Revenir au d√©but pour maintenir le flux de donn√©es
                commandSequenceStep = -1
            }
        }
        commandSequenceStep++
    }

    private fun identifyFrameType(data: ByteArray): String {
        return when {
            data.isEmpty() -> FRAME_TYPE_EMPTY
            data.size == 2 && data.contentEquals(byteArrayOf(0x00, 0x01)) -> FRAME_TYPE_KEEP_ALIVE
            data.size == 4 && data[2] == 0xFF.toByte() && data[3] == 0xFF.toByte() -> FRAME_TYPE_DIAGNOSTIC
            data.size == 8 && data[0] == 0x08.toByte() -> FRAME_TYPE_M0ROBOT_MAIN_8BYTE
            data.size == 16 && data[0] == 0x5A.toByte() -> FRAME_TYPE_M0ROBOT_EXTENDED_16BYTE

            // D√©tecter les r√©ponses aux commandes
            data.size >= 6 && data[0] == 0x55.toByte() && data[1] == 0xAA.toByte() -> FRAME_TYPE_RESPONSE
            data.size >= 3 && data[0] == 0xAA.toByte() -> FRAME_TYPE_RESPONSE

            else -> FRAME_TYPE_UNKNOWN
        }
    }

    private fun parseCommandResponse(data: ByteArray) {
        Log.d(TAG, "üîç ANALYSE R√âPONSE COMMANDE: ${bytesToHex(data)}")

        when {
            // R√©ponse format 55 AA ...
            data.size >= 6 && data[0] == 0x55.toByte() && data[1] == 0xAA.toByte() -> {
                parseProtocolResponse(data)
            }

            // R√©ponse format AA ...
            data.size >= 3 && data[0] == 0xAA.toByte() -> {
                parseSimpleResponse(data)
            }

            // Autres formats possibles
            else -> {
                Log.d(TAG, "Format de r√©ponse non reconnu, stockage raw data")
                rawDataBuffer["unknown_${System.currentTimeMillis()}"] = data
                analyzeUnknownResponse(data)
            }
        }
    }

    private fun parseProtocolResponse(data: ByteArray) {
        try {
            val length = data[2].toUByte().toInt()
            val command = data[3].toUByte().toInt()
            val subCommand = if (data.size > 4) data[4].toUByte().toInt() else 0

            Log.d(TAG, "R√©ponse protocole - Length: $length, Cmd: 0x${command.toString(16)}, SubCmd: 0x${subCommand.toString(16)}")

            when (command) {
                0x22 -> parseInfoResponse(data, subCommand)
                0x23 -> parseBatteryResponse(data, subCommand)
                0x21 -> parseRealtimeResponse(data, subCommand)
                else -> {
                    Log.d(TAG, "Commande inconnue: 0x${command.toString(16)}")
                    rawDataBuffer["cmd_${command}_${subCommand}"] = data
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erreur parsing r√©ponse protocole", e)
        }
    }

    private fun parseInfoResponse(data: ByteArray, subCommand: Int) {
        Log.d(TAG, "üìä PARSING R√âPONSE INFO (subcmd: 0x${subCommand.toString(16)})")

        when (subCommand) {
            0x01 -> {
                // Infos g√©n√©rales
                if (data.size >= 10) {
                    val battery = data[5].toUByte().toInt()
                    val voltage = if (data.size > 6) ((data[7].toUByte().toInt() shl 8) or data[6].toUByte().toInt()) / 100f else 0f

                    Log.d(TAG, "‚úÖ BATTERIE TROUV√âE: ${battery}%")
                    Log.d(TAG, "‚úÖ VOLTAGE TROUV√â: ${voltage}V")

                    updateCurrentData(ScooterData(battery = battery.toFloat(), voltage = voltage))
                }
            }

            0x31 -> {
                // R√©ponse sp√©cifique batterie
                if (data.size >= 6) {
                    val battery = data[5].toUByte().toInt()
                    Log.d(TAG, "üîã BATTERIE SP√âCIFIQUE: ${battery}%")
                    updateCurrentData(ScooterData(battery = battery.toFloat()))
                }
            }

            0x29 -> {
                // R√©ponse odom√©trie
                if (data.size >= 8) {
                    val odometerRaw = ((data[7].toUByte().toInt() shl 8) or data[6].toUByte().toInt())
                    val odometer = odometerRaw / 10f
                    Log.d(TAG, "üõ£Ô∏è ODOM√âTRIE TROUV√âE: ${odometer}km (raw: $odometerRaw)")
                    updateCurrentData(ScooterData(odometer = odometer))
                }
            }

            0x1A -> {
                // R√©ponse temp√©rature
                if (data.size >= 6) {
                    val temperature = data[5].toUByte().toInt().toFloat()
                    Log.d(TAG, "üå°Ô∏è TEMP√âRATURE TROUV√âE: ${temperature}¬∞C")
                    updateCurrentData(ScooterData(temperature = temperature))
                }
            }
        }
    }

    private fun parseBatteryResponse(data: ByteArray, subCommand: Int) {
        Log.d(TAG, "üîã PARSING R√âPONSE BATTERIE")
        // Impl√©mentation pour r√©ponses sp√©cifiques batterie
    }

    private fun parseRealtimeResponse(data: ByteArray, subCommand: Int) {
        Log.d(TAG, "‚ö° PARSING R√âPONSE TEMPS R√âEL")

        if (data.size >= 8) {
            val speed = ((data[6].toUByte().toInt() shl 8) or data[5].toUByte().toInt()) / 100f
            val current = if (data.size > 8) ((data[8].toUByte().toInt() shl 8) or data[7].toUByte().toInt()) / 100f else 0f

            Log.d(TAG, "üèÉ VITESSE TEMPS R√âEL: ${speed}km/h")
            if (current > 0) Log.d(TAG, "‚ö° COURANT: ${current}A")

            updateCurrentData(ScooterData(speed = speed, current = current))
        }
    }

    private fun parseSimpleResponse(data: ByteArray) {
        Log.d(TAG, "Simple response: ${bytesToHex(data)}")
        rawDataBuffer["simple_${System.currentTimeMillis()}"] = data
    }

    private fun analyzeUnknownResponse(data: ByteArray) {
        Log.d(TAG, "üîç ANALYSE FRAME INCONNUE")

        // Rechercher des patterns de donn√©es
        for (i in data.indices) {
            val value = data[i].toUByte().toInt()

            // Batterie potentielle (0-100)
            if (value in 20..100) {
                Log.d(TAG, "Candidat batterie √† offset $i: ${value}%")
            }

            // Temp√©rature potentielle (0-80¬∞C)
            if (value in 10..80) {
                Log.d(TAG, "Candidat temp√©rature √† offset $i: ${value}¬∞C")
            }
        }

        // Rechercher des valeurs 16-bit
        for (i in 0 until data.size - 1 step 2) {
            val value16LE = ((data[i + 1].toInt() and 0xFF) shl 8) or (data[i].toInt() and 0xFF)
            val value16BE = ((data[i].toInt() and 0xFF) shl 8) or (data[i + 1].toInt() and 0xFF)

            // Odom√©trie potentielle (100-9999 = 10-999.9km)
            if (value16LE in 100..9999) {
                Log.d(TAG, "Candidat odom√©trie √† offset $i (LE): ${value16LE / 10f}km")
            }
            if (value16BE in 100..9999 && value16BE != value16LE) {
                Log.d(TAG, "Candidat odom√©trie √† offset $i (BE): ${value16BE / 10f}km")
            }

            // Voltage potentiel (2000-7000 = 20-70V)
            if (value16LE in 2000..7000) {
                Log.d(TAG, "Candidat voltage √† offset $i (LE): ${value16LE / 100f}V")
            }
        }
    }

    private fun parseM0RobotMainFrame(data: ByteArray): ScooterData {
        // Frame format: 08 00 0A 00 00 00 90 01
        var speed = 0f
        var voltage = 0f

        try {
            // Vitesse: bytes 2-3 (Little Endian)
            val speedRaw = ((data[3].toInt() and 0xFF) shl 8) or (data[2].toInt() and 0xFF)
            if (speedRaw in 1..8000) {
                speed = speedRaw / 100f * 2.56f  // Facteur observ√© dans les logs
                Log.d(TAG, "Vitesse mise √† jour: ${speed}km/h (raw: $speedRaw)")
            }

            // Voltage: bytes 6-7 (Little Endian)
            val voltageRaw = ((data[7].toInt() and 0xFF) shl 8) or (data[6].toInt() and 0xFF)
            if (voltageRaw in 200..700) {  // Plage r√©aliste pour voltage * 10
                voltage = voltageRaw / 10f
                Log.d(TAG, "Voltage mis √† jour: ${voltage}V (raw: $voltageRaw)")
            }

        } catch (e: Exception) {
            Log.e(TAG, "Erreur parsing frame principale", e)
        }

        return ScooterData(speed = speed, voltage = voltage)
    }

    private fun parseM0RobotExtendedFrame(data: ByteArray): ScooterData {
        // Frame format: 5A 00 00 34 00 00 00 00 00 00 00 00 00 00 00 71
        // Cette frame semble √™tre un placeholder - les vraies donn√©es viennent des commandes

        Log.d(TAG, "Frame √©tendue re√ßue - demande de vraies donn√©es via commandes")
        return ScooterData()
    }

    private fun updateCurrentData(newData: ScooterData) {
        var hasUpdates = false
        var updatedData = currentData

        // Mettre √† jour seulement si les nouvelles valeurs sont valides et diff√©rentes
        if (newData.speed > 0f && newData.speed != currentData.speed) {
            updatedData = updatedData.copy(speed = newData.speed)
            hasUpdates = true
        }

        if (newData.battery > 0f && newData.battery != currentData.battery) {
            updatedData = updatedData.copy(battery = newData.battery)
            hasUpdates = true
        }

        if (newData.voltage > 0f && newData.voltage != currentData.voltage) {
            updatedData = updatedData.copy(voltage = newData.voltage)
            hasUpdates = true
        }

        if (newData.current != 0f && newData.current != currentData.current) {
            updatedData = updatedData.copy(current = newData.current)
            hasUpdates = true
        }

        if (newData.power > 0f && newData.power != currentData.power) {
            updatedData = updatedData.copy(power = newData.power)
            hasUpdates = true
        }

        if (newData.temperature > 0f && newData.temperature != currentData.temperature) {
            updatedData = updatedData.copy(temperature = newData.temperature)
            hasUpdates = true
        }

        if (newData.odometer > 0f && newData.odometer != currentData.odometer) {
            updatedData = updatedData.copy(odometer = newData.odometer)
            hasUpdates = true
        }

        if (hasUpdates) {
            currentData = updatedData.copy(
                lastUpdate = Date(),
                isConnected = true
            )

            Log.i(TAG, "üì± DONN√âES MISES √Ä JOUR: Vitesse=${currentData.speed}km/h, Batterie=${currentData.battery}%, Voltage=${currentData.voltage}V, Odom√©trie=${currentData.odometer}km, Temp=${currentData.temperature}¬∞C")
            onDataUpdate(currentData)
        }
    }

    private fun updateFrameStats(frameType: String) {
        frameTypeStats[frameType] = frameTypeStats.getOrDefault(frameType, 0) + 1
    }

    private fun generateDiagnosticReport() {
        val validityRate = if (frameCount > 0) (validFrameCount.toFloat() / frameCount * 100).toInt() else 0

        Log.i(TAG, "=== RAPPORT DIAGNOSTIC ===")
        Log.i(TAG, "Frames r√©centes: $frameCount")
        Log.i(TAG, "Frames valides: $validFrameCount ($validityRate%)")
        Log.i(TAG, "Types de frames: $frameTypeStats")
        Log.i(TAG, "Initialis√©: $isInitialized, √âtape commande: $commandSequenceStep")
        Log.i(TAG, "Donn√©es actuelles: Speed=${currentData.speed}km/h, Battery=${currentData.battery}%, Voltage=${currentData.voltage}V, Odometer=${currentData.odometer}km")

        if (validityRate < 50) {
            Log.w(TAG, "ATTENTION: Faible taux de frames valides - connexion instable")
        }
    }

    private fun bytesToHex(bytes: ByteArray): String {
        return bytes.joinToString(" ") { "%02X".format(it) }
    }

    fun getCurrentData(): ScooterData = currentData

    fun resetStats() {
        frameCount = 0
        validFrameCount = 0
        frameTypeStats.clear()
        rawDataBuffer.clear()
        isInitialized = false
        commandSequenceStep = 0
        Log.d(TAG, "Statistiques et √©tat r√©initialis√©s")
    }

    fun forceInitialization() {
        Log.i(TAG, "üîÑ FORCE R√âINITIALISATION")
        resetStats()
        startInitializationSequence()
    }
}